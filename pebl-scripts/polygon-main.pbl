define Start(par){
  #### Define all global colors and fonts etc. first here
  gHeaderFont <- MakeFont("VeraMono.ttf",0,22, MakeColor("black"), MakeColor("grey"),1)
  gTextFont <- MakeFont("VeraMono.ttf",0,13, MakeColor("black"), MakeColor("white"),1)
  gBtnFont <- MakeFont("VeraMono.ttf",0,15, MakeColor("black"), MakeColor("grey"),1)

  #### Read all audiofiles and init the lists
  #TODO make tutotial list
  gTutSentence <- []  # put the tutorial sentence NOT in the all sentence list

  gAllSentences <- InitAllAudioList()

  #### Create Main Window
  gVideoWidth <- 800
  gVideoHeight <- 600
  gWindow <- MakeWindow("white")

  nextBtn <- MakeLabel("Weiter", gBtnFont)
  AddObject(nextBtn, gWindow)
  Move(nextBtn, 400, 400)
  Hide(nextBtn)
  Draw()

  #### init experiment
  gSubNum <- GetSubNum(gWindow)
  if(not FileExists("output")) {
    MakeDirectory("output")
  }
  gFile <- FileOpenWrite("output/userData-" + gSubNum + ".txt")
  FilePrint(gFile, "Probandennummer: " + gSubNum)


  #Tutorial
  tutorialHeader <- MakeLabel("Tutorial", gHeaderFont)
  #TODO finish tutorial description
  explainationText <- MakeTextBox("Das Experiment läuft wie folgt ab. Ihr müsst dass und das machen, damit" +
    "dies und jenese passiert. <TODO Hier tutorial beschreibung rein>", gTextFont, 500, 50)
  AddObject(tutorialHeader, gWindow)
  AddObject(explainationText, gWindow)
  MoveCorner(tutorialHeader, 300, 50)
  Move(explainationText, 150,90)
  Show(nextBtn)
  Draw()

  #### Example Sentence
  nextClick <- WaitForClickOnTarget([nextBtn], [1])
  RemoveObject(explainationText, gWindow)
  Hide(nextBtn)
  listenToLabel <-EasyLabel("Drücke eine beliebige Taste um den Beispielsatz zu starten",350 ,250,gWindow, 14)
  Draw()
  RemoveObject(listenToLabel, gWindow)
  Hide(tutorialHeader)
  WaitForAnyKeyPress()
  ShowListeningScreen()
  PlayForeground(First(Nth(gSentence1_1,1)))
  afterPlayDesc <- ShowAfterPlayScreen(0)

  # todo tutorial richtig loopen wenn sätze da sind

  #### End of Tutorial screen
  Show(tutorialHeader)
  endTutorial <- MakeTextBox("Herzlichen Glückwunsch. Du hast das Tutorial erfolgreich absolviert." +
      "Um nun mit dem Experiment zu starten, klicke bitte auf Weiter", gTextFont, 500, 50)
  AddObject(endTutorial, gWindow)
  Move(endTutorial, 150, 120)
  Show(nextBtn)
  Draw(gWindow)
  nextClick <- WaitForClickOnTarget([nextBtn], [1])
  RemoveObject(endTutorial, gWindow)
  RemoveObject(tutorialHeader, gWindow)
  Hide(nextBtn)
  Draw(gWindow)

  #### Start Experiment and loop through all sentences
  loop(senBundle, gAllSentences){
    ShowPreSentenceScreen()
    #FInd out if last element is a context question. if so, cut out the last element and only go through the soundfiles
    contextQuestion <- Last(senBundle)
    isSlowToFast <- 1
    if(IsString(contextQuestion)){
      FilePrint(gFile, "Folgender Satz von schnell nach langsam: ")
      audioBundle <- SubList(senBundle, 1, Length(senBundle) -1)
      isSlowToFast <- 0
    }else{
      FilePrint(gFile, "Folgender Satz von langsam nach schnell: ")
      audioBundle <- senBundle
      isSlowToFast <- 1
    }
    loop(sentence, audioBundle){
      ShowListeningScreen()
      PlayForeground(First(sentence))
      # afterPlayDesc  0 == no, 1 == yes
      afterPlayDesc <- ShowAfterPlayScreen(isSlowToFast)
      FilePrint(gFile, "SatzId_Geschwindigkeit: " + Last(sentence) + "; Verstanden(j/n = 1/0): " + afterPlayDesc)
      # Break if understood and show contextquestion if there is one
      if(isSlowToFast == 1 AND afterPlayDesc == 0){
        break
      }elseif (isSlowToFast == 0 AND afterPlayDesc == 1){
        ShowContextQuestion(contextQuestion)
        break
      }
    }
    FilePrint(gFile, " ")
  }
  Print("Loops done")


  #Experiment done - close all streams and exit
  FileClose(gFile)
  experimentDoneBox <- MakeTextBox("Glückwunsch!
  Du hast das Experiment erfolgreich abgeschlossen.
  Zum Beenden einfach das Fenster schließen oder 'q' drücken.", gTextFont, 500, 50)
  AddObject(experimentDoneBox, gWindow)
  Move(experimentDoneBox, 150, 150)
  Draw(gWindow)
  WaitForKeyPress("Q")
}

#####################  Functions  ############################

# This method opens a pre setence screen
define ShowPreSentenceScreen(){
  preSetenceWin <- MakeWindow("white")
  AddObject(preSetenceWin, gWindow)
  sentSucceedLabel <- EasyLabel("Satz abgeschlossen!",350 ,200,preSetenceWin, 14)
  listenToLabel <- EasyLabel("Drücke eine beliebige Taste um den nächsten Satzablauf zu starten.",350 ,250,preSetenceWin, 14)
  Draw(preSetenceWin)
  WaitForAnyKeyPress()
  RemoveObject(preSetenceWin, gWindow)
  Draw(gWindow)
}

define ShowListeningScreen(){
  listeningScreen <- MakeWindow("white")
  AddObject(listeningScreen, gWindow)
  Draw(listeningScreen)
  Wait(500)
  play <- Circle(380,280,40,MakeColor("green"),1)
  AddObject(play, listeningScreen)
  Draw(listeningScreen)
  Wait(100)
  RemoveObject(listeningScreen, gWindow)
  Draw(gWindow)
}

# This shows an after setence playing screen, with the question if the subject
# has understood the setence. two buttons are there to get the answer.
# Returns 0 or 1.
# If 0, the user pressed button "no, dont understand"
# if 1, the user pressed button "yes, understood"
define ShowAfterPlayScreen(isSlowToFast){
  afterPlayWin <- MakeWindow("white")
  AddObject(afterPlayWin, gWindow)
  if(isSlowToFast == 1){
    headerLabel <- MakeLabel("Hast du den Satz NOCH verstanden?", gTextFont)
    yesLabel <- MakeLabel("Ja, bitte schneller abspielen.", gBtnFont)
    noLabel <- MakeLabel("Nein, jetzt war es zu schnell.", gBtnFont)
  }else{
    headerLabel <- MakeLabel("Hast du den Satz SCHON verstanden?", gTextFont)
    yesLabel <- MakeLabel("Ja, weiter mit der Frage.", gBtnFont)
    noLabel <- MakeLabel("Nein, bitte langsamer abspielen.", gBtnFont)
  }
  AddObject(headerLabel, afterPlayWin)
  AddObject(yesLabel, afterPlayWin)
  AddObject(noLabel, afterPlayWin)
  MoveCorner(headerLabel, 250, 150)
  MoveCorner(yesLabel, 50, 400)
  MoveCorner(noLabel, 400, 400)
  Draw(afterPlayWin)
  click <- WaitForClickOnTarget([yesLabel, noLabel], [1, 0])
  Print("Click: " + click)
  RemoveObject(afterPlayWin, gWindow)
  Draw(gWindow)
  return click
}

# Opens a context question screen and saves the answer to the file
define ShowContextQuestion(contextQuestion){
  contextWin <- MakeWindow("white")
  AddObject(contextWin, gWindow)
  headerLabel <-  MakeLabel("Kontextfrage", gHeaderFont)
  contextLabel <- MakeLabel(contextQuestion, gTextFont)
  yesLabel <- MakeLabel("Ja, richtig.", gBtnFont)
  noLabel <- MakeLabel("Nein, falsch.", gBtnFont)
  AddObject(headerLabel, contextWin)
  AddObject(contextLabel, contextWin)
  AddObject(yesLabel, contextWin)
  AddObject(noLabel, contextWin)
  MoveCorner(headerLabel, 250, 50)
  MoveCorner(contextLabel, 200, 150)
  MoveCorner(yesLabel, 150, 400)
  MoveCorner(noLabel, 400, 400)
  Draw(contextWin)
  answer <- WaitForClickOnTarget([yesLabel, noLabel], [1, 0])
  FilePrint(gFile, contextQuestion + " Antwort(j/n = 1/0): " + answer)
  RemoveObject(contextWin, gWindow)
  Draw(gWindow)
}

#Get all soundfiles to the sentence with the given id
#The setence id is written in the versuchsplan
define GetSentences(sentenceId){
  sentences <- []
  # we start at 100% and increase by 10. we have 14 speeds
  i <- 100
  while(i <= 120){ #TODO wieder auf 230 setzen
    fileId <- sentenceId + "_" + i
    sen<- LoadSound("audio/" + fileId + ".wav")
    PushOnEnd(sentences, [sen, fileId])
    i <- i + 10
  }
  return sentences
}

# Change the order of the given list, so that the returned list is the sample
# list but the now from last to first element.
define ChangeListOrder(changingList){
  orderedList <- []
  i <- Length(changingList)
  while( i >= 1){
    item <- Nth(changingList, i)
    PushOnEnd(orderedList, item)
    i <- i -1
  }
  return orderedList
}

# initializes all audio lists and returns one list including all sublists
define InitAllAudioList(){
  #TODO init all other sentences
  gSentence1_1 <- GetSentences("1_1")
  gSentence1_1Backward <- ChangeListOrder(gSentence1_1)
  PushOnEnd(gSentence1_1Backward, "Hauuuuus!??")

  gSentence1_2 <- GetSentences("1_2")
  gSentence1_2Backward <- ChangeListOrder(gSentence1_2)
  PushOnEnd(gSentence1_2Backward, "Ist das Haus Grün?")

  gSentence2_1 <- GetSentences("2_1")
  gSentence2_1Backward <- ChangeListOrder(gSentence2_1)
  PushOnEnd(gSentence2_1Backward, "Noch ne Frage?????")

  return [gSentence1_1, gSentence2_1Backward, gSentence1_1Backward, gSentence1_2,
   gSentence1_2Backward, gSentence2_1]
}
